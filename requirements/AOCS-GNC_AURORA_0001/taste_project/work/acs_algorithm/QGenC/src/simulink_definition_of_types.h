#include "dataview-uniq.h"

/*
* Why "#define MyInteger asn1SccMyInteger" ?
*
*     For example .asn :
*         MyInteger ::= INTEGER (0..255)
*
*     Simulink's model uses the data types defined in .asn files and processed by DMT (MyInteger, uint8 - because range is 0 .. 255).
*     MatLab's s-functions use .c and .h files generated by Kazoo that use the data types generated by the asn1scc compiler.
*     asn1scc compiler translates the data types defined in .asn files, but adding the "asn1Scc" prefix (asn1SccMyInteger) to names of data types
*         and uses base types of different size (e.g., uint64_t for non-negative integer on a Linux platform).
*     One the one hand Simulink's model uses the data types generated by DMT (MyInteger, uint8), but on the other hand s-function uses the data types
*         generated by asn1scc compiler (asn1SccMyinteger, uint64_t).
*     This causes a mismatch between the names of the data types and their size.
*     To avoid this situation it is necessary to use only one data type - asn1SccMyInteger (uint64 > uint8).
*     For consistency (the entire TASTE environment already uses MyInteger) this file is generated.
*     During the compilation QGen and TASTE will use asn1SccMyInteger data type, but user in MatLab still can work on MyInteger data type (uint8).
*
* Why "#ifndef MyInteger" ?
*     #ifndef construction was used to simplify the generation process by Kazoo.
*     A simple iteration over the data types is sufficient.
*/

// -------------------------------------------
// Data Types Use By Provided Interfaces

// Function Block : "ACS_Algorithm"
// Interface      : "Step"

#ifndef T_B_b_T
#define T_B_b_T asn1SccT_B_b_T
#endif

#ifndef T_Omega
#define T_Omega asn1SccT_Omega
#endif

#ifndef T_Float
#define T_Float asn1SccT_Float
#endif

#ifndef T_Float
#define T_Float asn1SccT_Float
#endif

#ifndef T_Float
#define T_Float asn1SccT_Float
#endif

#ifndef T_MT_Working
#define T_MT_Working asn1SccT_MT_Working
#endif

#ifndef T_Control
#define T_Control asn1SccT_Control
#endif

// -------------------------------------------
// Data Types Use By Required Interfaces


