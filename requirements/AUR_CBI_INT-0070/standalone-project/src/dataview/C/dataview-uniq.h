#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccAuroraInt;


flag asn1SccAuroraInt_Equal(const asn1SccAuroraInt* pVal1, const asn1SccAuroraInt* pVal2);

#define ERR_AURORAINT		1  /*(-1000000 .. 1000000)*/
flag asn1SccAuroraInt_IsConstraintValid(const asn1SccAuroraInt* pVal, int* pErrCode);

void asn1SccAuroraInt_Initialize(asn1SccAuroraInt* pVal);

#define ERR_UPER_ENCODE_AURORAINT		2  /**/
#define asn1SccAuroraInt_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccAuroraInt_REQUIRED_BITS_FOR_ENCODING        21

flag asn1SccAuroraInt_Encode(const asn1SccAuroraInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAINT		3  /**/
flag asn1SccAuroraInt_Decode(asn1SccAuroraInt* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAINT		4  /**/
#define asn1SccAuroraInt_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccAuroraInt_REQUIRED_BITS_FOR_ACN_ENCODING        21

flag asn1SccAuroraInt_ACN_Encode(const asn1SccAuroraInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAINT		5  /**/
flag asn1SccAuroraInt_ACN_Decode(asn1SccAuroraInt* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccAuroraUInt;


flag asn1SccAuroraUInt_Equal(const asn1SccAuroraUInt* pVal1, const asn1SccAuroraUInt* pVal2);

#define ERR_AURORAUINT		6  /*(0 .. 1000000)*/
flag asn1SccAuroraUInt_IsConstraintValid(const asn1SccAuroraUInt* pVal, int* pErrCode);

void asn1SccAuroraUInt_Initialize(asn1SccAuroraUInt* pVal);

#define ERR_UPER_ENCODE_AURORAUINT		7  /**/
#define asn1SccAuroraUInt_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccAuroraUInt_REQUIRED_BITS_FOR_ENCODING        20

flag asn1SccAuroraUInt_Encode(const asn1SccAuroraUInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAUINT		8  /**/
flag asn1SccAuroraUInt_Decode(asn1SccAuroraUInt* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAUINT		9  /**/
#define asn1SccAuroraUInt_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccAuroraUInt_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag asn1SccAuroraUInt_ACN_Encode(const asn1SccAuroraUInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAUINT		10  /**/
flag asn1SccAuroraUInt_ACN_Decode(asn1SccAuroraUInt* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccAuroraReal;


flag asn1SccAuroraReal_Equal(const asn1SccAuroraReal* pVal1, const asn1SccAuroraReal* pVal2);

#define ERR_AURORAREAL		11  /*(-1000000.0 .. 1000000.0)*/
flag asn1SccAuroraReal_IsConstraintValid(const asn1SccAuroraReal* pVal, int* pErrCode);

void asn1SccAuroraReal_Initialize(asn1SccAuroraReal* pVal);

#define ERR_UPER_ENCODE_AURORAREAL		12  /**/
#define asn1SccAuroraReal_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraReal_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraReal_Encode(const asn1SccAuroraReal* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAREAL		13  /**/
flag asn1SccAuroraReal_Decode(asn1SccAuroraReal* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAREAL		14  /**/
#define asn1SccAuroraReal_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraReal_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraReal_ACN_Encode(const asn1SccAuroraReal* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAREAL		15  /**/
flag asn1SccAuroraReal_ACN_Decode(asn1SccAuroraReal* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraVoltage;


flag asn1SccAuroraVoltage_Equal(const asn1SccAuroraVoltage* pVal1, const asn1SccAuroraVoltage* pVal2);

#define ERR_AURORAVOLTAGE_2		21  /*(0.0 .. 100000.0)*/
flag asn1SccAuroraVoltage_IsConstraintValid(const asn1SccAuroraVoltage* pVal, int* pErrCode);

void asn1SccAuroraVoltage_Initialize(asn1SccAuroraVoltage* pVal);

#define ERR_UPER_ENCODE_AURORAVOLTAGE_2		22  /**/
#define asn1SccAuroraVoltage_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraVoltage_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraVoltage_Encode(const asn1SccAuroraVoltage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAVOLTAGE_2		23  /**/
flag asn1SccAuroraVoltage_Decode(asn1SccAuroraVoltage* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAVOLTAGE		19  /**/
#define asn1SccAuroraVoltage_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraVoltage_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraVoltage_ACN_Encode(const asn1SccAuroraVoltage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAVOLTAGE		20  /**/
flag asn1SccAuroraVoltage_ACN_Decode(asn1SccAuroraVoltage* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraCurrent;


flag asn1SccAuroraCurrent_Equal(const asn1SccAuroraCurrent* pVal1, const asn1SccAuroraCurrent* pVal2);

#define ERR_AURORACURRENT_2		29  /*(0.0 .. 10000.0)*/
flag asn1SccAuroraCurrent_IsConstraintValid(const asn1SccAuroraCurrent* pVal, int* pErrCode);

void asn1SccAuroraCurrent_Initialize(asn1SccAuroraCurrent* pVal);

#define ERR_UPER_ENCODE_AURORACURRENT_2		30  /**/
#define asn1SccAuroraCurrent_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraCurrent_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraCurrent_Encode(const asn1SccAuroraCurrent* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORACURRENT_2		31  /**/
flag asn1SccAuroraCurrent_Decode(asn1SccAuroraCurrent* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORACURRENT		27  /**/
#define asn1SccAuroraCurrent_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraCurrent_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraCurrent_ACN_Encode(const asn1SccAuroraCurrent* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORACURRENT		28  /**/
flag asn1SccAuroraCurrent_ACN_Decode(asn1SccAuroraCurrent* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraPWM;


flag asn1SccAuroraPWM_Equal(const asn1SccAuroraPWM* pVal1, const asn1SccAuroraPWM* pVal2);

#define ERR_AURORAPWM_2		37  /*(0.0 .. 1.0)*/
flag asn1SccAuroraPWM_IsConstraintValid(const asn1SccAuroraPWM* pVal, int* pErrCode);

void asn1SccAuroraPWM_Initialize(asn1SccAuroraPWM* pVal);

#define ERR_UPER_ENCODE_AURORAPWM_2		38  /**/
#define asn1SccAuroraPWM_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraPWM_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraPWM_Encode(const asn1SccAuroraPWM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAPWM_2		39  /**/
flag asn1SccAuroraPWM_Decode(asn1SccAuroraPWM* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAPWM		35  /**/
#define asn1SccAuroraPWM_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraPWM_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraPWM_ACN_Encode(const asn1SccAuroraPWM* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAPWM		36  /**/
flag asn1SccAuroraPWM_ACN_Decode(asn1SccAuroraPWM* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraPIDValue;


flag asn1SccAuroraPIDValue_Equal(const asn1SccAuroraPIDValue* pVal1, const asn1SccAuroraPIDValue* pVal2);

#define ERR_AURORAPIDVALUE_2		45  /*(-100.0 .. 100.0)*/
flag asn1SccAuroraPIDValue_IsConstraintValid(const asn1SccAuroraPIDValue* pVal, int* pErrCode);

void asn1SccAuroraPIDValue_Initialize(asn1SccAuroraPIDValue* pVal);

#define ERR_UPER_ENCODE_AURORAPIDVALUE_2		46  /**/
#define asn1SccAuroraPIDValue_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraPIDValue_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraPIDValue_Encode(const asn1SccAuroraPIDValue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAPIDVALUE_2		47  /**/
flag asn1SccAuroraPIDValue_Decode(asn1SccAuroraPIDValue* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAPIDVALUE		43  /**/
#define asn1SccAuroraPIDValue_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraPIDValue_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraPIDValue_ACN_Encode(const asn1SccAuroraPIDValue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAPIDVALUE		44  /**/
flag asn1SccAuroraPIDValue_ACN_Decode(asn1SccAuroraPIDValue* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraTemperature;


flag asn1SccAuroraTemperature_Equal(const asn1SccAuroraTemperature* pVal1, const asn1SccAuroraTemperature* pVal2);

#define ERR_AURORATEMPERATURE_2		53  /*(0.0 .. 1000.0)*/
flag asn1SccAuroraTemperature_IsConstraintValid(const asn1SccAuroraTemperature* pVal, int* pErrCode);

void asn1SccAuroraTemperature_Initialize(asn1SccAuroraTemperature* pVal);

#define ERR_UPER_ENCODE_AURORATEMPERATURE_2		54  /**/
#define asn1SccAuroraTemperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraTemperature_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraTemperature_Encode(const asn1SccAuroraTemperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORATEMPERATURE_2		55  /**/
flag asn1SccAuroraTemperature_Decode(asn1SccAuroraTemperature* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORATEMPERATURE		51  /**/
#define asn1SccAuroraTemperature_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraTemperature_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraTemperature_ACN_Encode(const asn1SccAuroraTemperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORATEMPERATURE		52  /**/
flag asn1SccAuroraTemperature_ACN_Decode(asn1SccAuroraTemperature* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraFlowRate;


flag asn1SccAuroraFlowRate_Equal(const asn1SccAuroraFlowRate* pVal1, const asn1SccAuroraFlowRate* pVal2);

#define ERR_AURORAFLOWRATE_2		61  /*(0.0 .. 100.0)*/
flag asn1SccAuroraFlowRate_IsConstraintValid(const asn1SccAuroraFlowRate* pVal, int* pErrCode);

void asn1SccAuroraFlowRate_Initialize(asn1SccAuroraFlowRate* pVal);

#define ERR_UPER_ENCODE_AURORAFLOWRATE_2		62  /**/
#define asn1SccAuroraFlowRate_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraFlowRate_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraFlowRate_Encode(const asn1SccAuroraFlowRate* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORAFLOWRATE_2		63  /**/
flag asn1SccAuroraFlowRate_Decode(asn1SccAuroraFlowRate* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORAFLOWRATE		59  /**/
#define asn1SccAuroraFlowRate_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraFlowRate_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraFlowRate_ACN_Encode(const asn1SccAuroraFlowRate* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORAFLOWRATE		60  /**/
flag asn1SccAuroraFlowRate_ACN_Decode(asn1SccAuroraFlowRate* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccAuroraReal asn1SccAuroraBatteryCapacity;


flag asn1SccAuroraBatteryCapacity_Equal(const asn1SccAuroraBatteryCapacity* pVal1, const asn1SccAuroraBatteryCapacity* pVal2);

#define ERR_AURORABATTERYCAPACITY_2		69  /*(0.0 .. 1.0)*/
flag asn1SccAuroraBatteryCapacity_IsConstraintValid(const asn1SccAuroraBatteryCapacity* pVal, int* pErrCode);

void asn1SccAuroraBatteryCapacity_Initialize(asn1SccAuroraBatteryCapacity* pVal);

#define ERR_UPER_ENCODE_AURORABATTERYCAPACITY_2		70  /**/
#define asn1SccAuroraBatteryCapacity_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAuroraBatteryCapacity_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccAuroraBatteryCapacity_Encode(const asn1SccAuroraBatteryCapacity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORABATTERYCAPACITY_2		71  /**/
flag asn1SccAuroraBatteryCapacity_Decode(asn1SccAuroraBatteryCapacity* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORABATTERYCAPACITY		67  /**/
#define asn1SccAuroraBatteryCapacity_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccAuroraBatteryCapacity_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccAuroraBatteryCapacity_ACN_Encode(const asn1SccAuroraBatteryCapacity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORABATTERYCAPACITY		68  /**/
flag asn1SccAuroraBatteryCapacity_ACN_Decode(asn1SccAuroraBatteryCapacity* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccAuroraControllerStatus --------------------------------------------*/
typedef struct {
    asn1SccAuroraTemperature payload_temperature;
    asn1SccAuroraFlowRate payload_flow_rate;
    asn1SccAuroraBatteryCapacity battery_capacity;
    asn1SccAuroraVoltage solar_panel_voltage;
    asn1SccAuroraCurrent solar_panel_current;

} asn1SccAuroraControllerStatus;

flag asn1SccAuroraControllerStatus_Equal(const asn1SccAuroraControllerStatus* pVal1, const asn1SccAuroraControllerStatus* pVal2);

#define ERR_AURORACONTROLLERSTATUS		137  /**/
#define ERR_AURORACONTROLLERSTATUS_PAYLOAD_TEMPERATURE_2_2		80  /**/
#define ERR_AURORACONTROLLERSTATUS_PAYLOAD_FLOW_RATE_2_2		93  /**/
#define ERR_AURORACONTROLLERSTATUS_BATTERY_CAPACITY_2_2		106  /**/
#define ERR_AURORACONTROLLERSTATUS_SOLAR_PANEL_VOLTAGE_2_2		119  /**/
#define ERR_AURORACONTROLLERSTATUS_SOLAR_PANEL_CURRENT_2_2		132  /**/
flag asn1SccAuroraControllerStatus_IsConstraintValid(const asn1SccAuroraControllerStatus* pVal, int* pErrCode);

void asn1SccAuroraControllerStatus_Initialize(asn1SccAuroraControllerStatus* pVal);

#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS		138  /**/
#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS_PAYLOAD_TEMPERATURE_2_2		81  /**/
#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS_PAYLOAD_FLOW_RATE_2_2		94  /**/
#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS_BATTERY_CAPACITY_2_2		107  /**/
#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_VOLTAGE_2_2		120  /**/
#define ERR_UPER_ENCODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_CURRENT_2_2		133  /**/
#define asn1SccAuroraControllerStatus_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccAuroraControllerStatus_REQUIRED_BITS_FOR_ENCODING        520

flag asn1SccAuroraControllerStatus_Encode(const asn1SccAuroraControllerStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS		139  /**/
#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS_PAYLOAD_TEMPERATURE_2_2		82  /**/
#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS_PAYLOAD_FLOW_RATE_2_2		95  /**/
#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS_BATTERY_CAPACITY_2_2		108  /**/
#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_VOLTAGE_2_2		121  /**/
#define ERR_UPER_DECODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_CURRENT_2_2		134  /**/
flag asn1SccAuroraControllerStatus_Decode(asn1SccAuroraControllerStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS		140  /**/
#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS_PAYLOAD_TEMPERATURE_2		83  /**/
#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS_PAYLOAD_FLOW_RATE_2		96  /**/
#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS_BATTERY_CAPACITY_2		109  /**/
#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_VOLTAGE_2		122  /**/
#define ERR_ACN_ENCODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_CURRENT_2		135  /**/
#define asn1SccAuroraControllerStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       65 
#define asn1SccAuroraControllerStatus_REQUIRED_BITS_FOR_ACN_ENCODING        520

flag asn1SccAuroraControllerStatus_ACN_Encode(const asn1SccAuroraControllerStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS		141  /**/
#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS_PAYLOAD_TEMPERATURE_2		84  /**/
#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS_PAYLOAD_FLOW_RATE_2		97  /**/
#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS_BATTERY_CAPACITY_2		110  /**/
#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_VOLTAGE_2		123  /**/
#define ERR_ACN_DECODE_AURORACONTROLLERSTATUS_SOLAR_PANEL_CURRENT_2		136  /**/
flag asn1SccAuroraControllerStatus_ACN_Decode(asn1SccAuroraControllerStatus* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		142  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		143  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		144  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		145  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		146  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		147  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		148  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		149  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		150  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		151  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		152  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		153  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		154  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		155  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		156  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		157  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		158  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		159  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		160  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		161  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		162  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		163  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		164  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		165  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		166  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		167  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


flag asn1SccPID_Range_Equal(const asn1SccPID_Range* pVal1, const asn1SccPID_Range* pVal2);

#define ERR_PID_RANGE		172  /*(0..6)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		173  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		174  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID_RANGE		175  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_Range_ACN_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID_RANGE		176  /**/
flag asn1SccPID_Range_ACN_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_algorithms = 0,
    PID_controller = 1,
    PID_electrics_power_supply = 2,
    PID_master_clock = 3,
    PID_mmi = 4,
    PID_payload = 5,
    PID_env = 6
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_algorithms PID_algorithms
#define asn1SccPID_controller PID_controller
#define asn1SccPID_electrics_power_supply PID_electrics_power_supply
#define asn1SccPID_master_clock PID_master_clock
#define asn1SccPID_mmi PID_mmi
#define asn1SccPID_payload PID_payload
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		177  /*algorithms | controller | electrics-power-supply | master-clock | mmi | payload | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		178  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		179  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		180  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		181  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
